import boto3
import json
import os
from botocore.exceptions import ClientError

# Configure AWS services
ses_client = boto3.client('ses')
cloudtrail_client = boto3.client('cloudtrail')

# Email configuration
sender_email = 'your_sender_email@example.com'
recipient_email = 'your_recipient_email@example.com'
subject = 'Lambda Function Creation Report'

def send_email(subject, body):
    try:
        response = ses_client.send_email(
            Source=sender_email,
            Destination={
                'ToAddresses': [recipient_email]
            },
            Message={
                'Subject': {
                    'Data': subject
                },
                'Body': {
                    'Text': {
                        'Data': body
                    }
                }
            }
        )
        print("Email sent successfully!")
    except ClientError as e:
        print("Email sending failed: ", e.response['Error']['Message'])

def lambda_handler(event, context):
    function_report = ''

    try:
        response = cloudtrail_client.lookup_events(
            LookupAttributes=[
                {'AttributeKey': 'EventName', 'AttributeValue': 'CreateFunction'},
                {'AttributeKey': 'ResourceType', 'AttributeValue': 'AWS::Lambda::Function'}
            ],
            MaxResults=50,  # Adjust the value based on your needs
            StartTime=(datetime.now() - timedelta(days=1)).isoformat(),
            EndTime=datetime.now().isoformat()
        )

        for event in response['Events']:
            event_name = event['EventName']
            event_time = event['EventTime']
            username = event['Username']
            resources = event['Resources']

            for resource in resources:
                resource_type = resource['ResourceType']
                resource_name = resource['ResourceName']
                tags = resource.get('Tags', [])
                created_by_role = event['UserIdentity']['SessionContext']['SessionIssuer']['UserName']

                report_line = f"Event Name: {event_name}\n" \
                              f"Event Time: {event_time}\n" \
                              f"Username: {username}\n" \
                              f"Resource Type: {resource_type}\n" \
                              f"Resource Name: {resource_name}\n" \
                              f"Tags: {tags}\n" \
                              f"Created By Role: {created_by_role}\n\n"

                function_report += report_line

        if function_report:
            send_email(subject, function_report)
        else:
            print("No Lambda function creation events found.")

    except Exception as e:
        print("Error: ", e)
