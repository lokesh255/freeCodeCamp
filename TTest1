import boto3

def lambda_handler(event, context):
    # Specify your SES email address
    sender_email = "your_sender_email@example.com"
    
    # Specify the recipients' email addresses
    recipient_emails = ["recipient1@example.com", "recipient2@example.com"]
    
    # Initialize the SES client
    ses_client = boto3.client("ses", region_name="us-east-1")
    
    # Retrieve CloudTrail event history
    cloudtrail_client = boto3.client("cloudtrail")
    response = cloudtrail_client.lookup_events(
        LookupAttributes=[
            {
                "AttributeKey": "EventName",
                "AttributeValue": "CreateFunction"
            }
        ]
    )
    events = response["Events"]
    
    report = ""
    
    # Extract relevant information from the event history
    for event in events:
        event_name = event["EventName"]
        resource_name = event["Resources"][0]["ResourceName"]
        function_name = event["Resources"][0]["ResourceName"].split(":function:")[1]
        
        # Extract the creator and role information from the event response
        creator = event["Username"]
        role_arn = event["CloudTrailEvent"]["requestParameters"]["role"]
        
        report += f"Function Name: {function_name}\n"
        report += f"Creator: {creator}\n"
        report += f"Role ARN: {role_arn}\n"
        report += "-------------------------------------------------\n"
    
    # Send the report via email
    subject = "Lambda Function Creation Report"
    body = f"Lambda Function Creation Report:\n\n{report}"
    
    try:
        response = ses_client.send_email(
            Source=sender_email,
            Destination={
                "ToAddresses": recipient_emails
            },
            Message={
                "Subject": {"Data": subject},
                "Body": {"Text": {"Data": body}}
            }
        )
        print("Email sent successfully.")
    except Exception as e:
        print(f"Error sending email: {e}")
