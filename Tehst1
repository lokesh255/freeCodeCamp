import boto3
import json
from io import StringIO, BytesIO

def get_tag_editors_by_resource_type(resource_type):
    # Configure your AWS region
    region = 'your_aws_region'

    # Initialize the Resource Groups Tag Editor client
    tag_editor_client = boto3.client('resourcegroupstaggingapi', region_name=region)

    # Get resources with tags
    response = tag_editor_client.get_resources()

    # Extract tag keys for the specified resource type
    resource_tag_editors = set()
    for resource in response['ResourceTagMappingList']:
        if resource['ResourceARN'].startswith(f"arn:aws:{resource_type.split('::')[0]}"):
            tags = resource.get('Tags', [])
            for tag in tags:
                resource_tag_editors.add(tag['Key'])

    # Create a CSV string to store the data
    csv_buffer = StringIO()
    csv_buffer.write("Tag Key\n")

    # Write the resource tag editors to the CSV buffer
    for tag_editor in resource_tag_editors:
        csv_buffer.write(f"{tag_editor}\n")

    # Create an Excel file buffer to store the data
    excel_buffer = BytesIO()
    excel_buffer.write(csv_buffer.getvalue().encode())
    excel_buffer.seek(0)

    return excel_buffer

def lambda_handler(event, context):
    # Configure your AWS region and SES client
    region = 'your_aws_region'
    ses_client = boto3.client('ses', region_name=region)

    # Specify the event names you want to filter for
    event_names_filter = ['CreateFunction', 'CreateBucket', 'CreateService']

    # Initialize the CloudTrail client
    cloudtrail_client = boto3.client('cloudtrail', region_name=region)

    # Use the lookup_events API to retrieve the events
    all_event_details = []
    for event_name_filter in event_names_filter:
        response = cloudtrail_client.lookup_events(
            LookupAttributes=[
                {
                    'AttributeKey': 'EventName',
                    'AttributeValue': event_name_filter
                }
            ]
        )

        # Extract required event details and store them in a list of dictionaries
        for event_data in response['Events']:
            event_name = event_data['EventName']
            user_identity = event_data.get('UserIdentity', {})
            user_identity_type = user_identity.get('Type', 'N/A')
            principal_id = user_identity.get('PrincipalId', 'N/A')
            arn = user_identity.get('Arn', 'N/A')
            user_name = user_identity.get('UserName', 'N/A')
            resources = event_data.get('Resources', [])
            function_name = next((resource['ResourceName'] for resource in resources if resource['ResourceType'] == 'AWS::Lambda::Function'), 'N/A')
            bucket_name = next((resource['ResourceName'] for resource in resources if resource['ResourceType'] == 'AWS::S3::Bucket'), 'N/A')
            service_name = next((resource['ResourceName'] for resource in resources if resource['ResourceType'] == 'AWS::Service::Resource'), 'N/A')

            all_event_details.append({
                'EventName': event_name,
                'UserIdentityType': user_identity_type,
                'PrincipalID': principal_id,
                'ARN': arn,
                'UserName': user_name,
                'FunctionName': function_name,
                'BucketName': bucket_name,
                'ServiceName': service_name
            })

    # Create a table in HTML format with the event details
    table = "<table border='1'><tr><th>Event Name</th><th>User Identity Type</th><th>PrincipalID</th><th>ARN</th><th>User Name</th><th>Function Name</th><th>Bucket Name</th><th>Service Name</th></tr>"
    for event_detail in all_event_details:
        table += f"<tr><td>{event_detail['EventName']}</td><td>{event_detail['UserIdentityType']}</td><td>{event_detail['PrincipalID']}</td><td>{event_detail['ARN']}</td><td>{event_detail['UserName']}</td><td>{event_detail['FunctionName']}</td><td>{event_detail['BucketName']}</td><td>{event_detail['ServiceName']}</td></tr>"
    table += "</table>"

    # Send email using SES with the table and tag editors in the email body
    sender_email = 'your_sender_email'
    recipient_email = 'your_recipient_email'
    subject = 'CloudTrail Event Report with Tag Editors List'
    body = f"CloudTrail events with EventNames: {', '.join(event_names_filter)}\n\n{table}"

    try:
        # Assuming you want to download tag editors for EC2 instances, change 'AWS::EC2::Instance' to the desired resource type
        resource_type = 'AWS::EC2::Instance'
        excel_buffer = get_tag_editors_by_resource_type(resource_type)
        excel_bytes = excel_buffer.getvalue()

        ses_client.send_email(
            Source=sender_email,
            Destination={'ToAddresses': [recipient_email]},
            Message={
                'Subject': {'Data': subject},
                'Body': {'Html': {'Data': body}},
            },
            Attachments=[
                {
                    'FileName': f'Tag_Editors_{resource_type}.csv',
                    'Data': excel_bytes,
                    'ContentType': 'text/csv'
                }
            ]
        )

        return {
            'statusCode': 200,
            'body': json.dumps('Email sent successfully.')
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps(f'Error sending email: {str(e)}')
        }
