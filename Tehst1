import boto3
import json

def get_assume_role_arn(lambda_function_arn):
    # Get the function details to extract the IAM role ARN
    lambda_client = boto3.client('lambda')
    response = lambda_client.get_function(FunctionName=lambda_function_arn)
    function_role_arn = response['Configuration']['Role']

    # Extract the AssumeRole ARN from the IAM role
    iam_client = boto3.client('iam')
    response = iam_client.get_role(RoleName=function_role_arn.split('/')[-1])
    assume_role_arn = response['Role']['AssumeRolePolicyDocument']['Statement'][0]['Principal']['Service'][5:]

    return assume_role_arn

def lambda_handler(event, context):
    # Configure your AWS region and SES client
    region = 'your_aws_region'
    ses_client = boto3.client('ses', region_name=region)

    # Initialize the Lambda client
    lambda_client = boto3.client('lambda', region_name=region)

    # List all Lambda functions
    response = lambda_client.list_functions()

    # Extract Lambda function details (FunctionName, IAM Role ARN, AssumeRole ARN)
    function_details = []
    for function_data in response['Functions']:
        function_name = function_data['FunctionName']
        assume_role_arn = get_assume_role_arn(function_data['FunctionArn'])
        iam_role_arn = function_data['Role']
        function_details.append({'FunctionName': function_name, 'AssumeRoleARN': assume_role_arn, 'IAMRoleARN': iam_role_arn})

    # Create a table in HTML format with the function details
    table = "<table border='1'><tr><th>Function Name</th><th>Assume Role ARN</th><th>IAM Role ARN</th></tr>"
    for function_detail in function_details:
        table += f"<tr><td>{function_detail['FunctionName']}</td><td>{function_detail['AssumeRoleARN']}</td><td>{function_detail['IAMRoleARN']}</td></tr>"
    table += "</table>"

    # Send email using SES with the table in the email body
    sender_email = 'your_sender_email'
    recipient_email = 'your_recipient_email'
    subject = 'Lambda Function and Role Details Report'
    body = f"Lambda Function and Role Details:\n\n{table}"

    try:
        ses_client.send_email(
            Source=sender_email,
            Destination={'ToAddresses': [recipient_email]},
            Message={
                'Subject': {'Data': subject},
                'Body': {'Html': {'Data': body}},
            }
        )
        return {
            'statusCode': 200,
            'body': json.dumps('Email sent successfully.')
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps(f'Error sending email: {str(e)}')
        }
