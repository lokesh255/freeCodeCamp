{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template for S3 Bucket, IAM Role, Lambda, and S3 Bucket Policy",
  "Parameters": {
    "SourceBucketName": {
      "Description": "Name of the source S3 bucket.",
      "Type": "String"
    }
  },
  "Resources": {
    "MyS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": { "Ref": "SourceBucketName" }
      }
    },
    "MyLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "MyLambdaRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": "lambda.amazonaws.com" },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "MyLambdaPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["s3:GetObject", "s3:PutObject"],
                  "Resource": [
                    { "Fn::GetAtt": ["MyS3Bucket", "Arn"] },
                    { "Fn::Sub": "${MyS3Bucket.Arn}/*" }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "MyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "MyLambdaFunction",
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "",
              [
                "const AWS = require('aws-sdk');\n",
                "const s3 = new AWS.S3();\n",
                "exports.handler = async (event, context) => {\n",
                "  const params = {\n",
                "    Bucket: { \"Ref\": \"SourceBucketName\" },\n",
                "    CopySource: `/${SourceBucketName}/object-key`,\n",
                "    Key: 'destination-object-key'\n",
                "  };\n",
                "  await s3.copyObject(params).promise();\n",
                "};\n"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt": ["MyLambdaRole", "Arn"] },
        "Runtime": "nodejs14.x"
      }
    },
    "MyBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": { "Ref": "MyS3Bucket" },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": { "Fn::Sub": "arn:aws:s3:::${SourceBucketName}/*" }
            }
          ]
        }
      }
    }
  }
}
