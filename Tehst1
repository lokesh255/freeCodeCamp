import boto3
import csv
import io

def lambda_handler(event, context):
    # Configure your AWS region and SES client
    region = 'your_aws_region'
    ses_client = boto3.client('ses', region_name=region)
    
    # Specify the event name you want to filter for
    event_name_filter = 'CreateFunction'

    # Initialize the CloudTrail client
    cloudtrail_client = boto3.client('cloudtrail', region_name=region)

    # Use the lookup_events API to retrieve the events
    response = cloudtrail_client.lookup_events(
        LookupAttributes=[
            {
                'AttributeKey': 'EventName',
                'AttributeValue': event_name_filter
            }
        ]
    )
    
    # Extract required event details and store them in a list of dictionaries
    event_details = []
    for event_data in response['Events']:
        event_name = event_data['EventName']
        user_identity = event_data['Username']
        assume_role_arn = event_data['UserIdentity']['SessionContext']['SessionIssuer']['Arn']
        event_details.append({'EventName': event_name, 'UserName': user_identity, 'UserIdentity': assume_role_arn})

    # Create a CSV file with the event details
    csv_file = io.StringIO()
    csv_writer = csv.DictWriter(csv_file, fieldnames=['EventName', 'UserName', 'UserIdentity'])
    csv_writer.writeheader()
    csv_writer.writerows(event_details)
    
    # Send email using SES with the CSV file as an attachment
    sender_email = 'your_sender_email'
    recipient_email = 'your_recipient_email'
    subject = 'CloudTrail Event Report'
    body = 'Please find the CloudTrail event report in the attached CSV file.'
    attachment_name = 'cloudtrail_events.csv'
    
    try:
        ses_client.send_email(
            Source=sender_email,
            Destination={'ToAddresses': [recipient_email]},
            Message={
                'Subject': {'Data': subject},
                'Body': {'Text': {'Data': body}},
            },
            # Convert the CSV file to bytes and attach it to the email
            Attachments=[
                {
                    'FileName': attachment_name,
                    'ContentType': 'text/csv',
                    'Data': csv_file.getvalue()
                },
            ]
        )
        return {
            'statusCode': 200,
            'body': 'Email sent successfully.'
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'body': f'Error sending email: {str(e)}'
        }
