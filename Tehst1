import boto3

from botocore.exceptions import ClientError

def get_user_identity(event):
    user_identity = event.get('UserIdentity')
    if user_identity:
        return user_identity.get('SessionContext', {}).get('SessionIssuer', {}).get('Arn')
    else:
        return 'Unknown'

def lambda_handler(event, context):
    # Configure AWS services
    ses_client = boto3.client('ses')
    cloudtrail_client = boto3.client('cloudtrail')

    # Retrieve CloudTrail events for all "Create" event names
    response = cloudtrail_client.lookup_events(
        LookupAttributes=[
            {'AttributeKey': 'EventName', 'AttributeValue': 'Create*'}
        ]
    )

    # Process CloudTrail events
    log_events = response['Events']
    created_services = []

    for event in log_events:
        # Extract information about the created service
        event_name = event.get('EventName', 'Unknown')
        event_source = event.get('EventSource', 'Unknown')
        service_name = event_source.split('.')[0]
        assumed_role_arn = get_user_identity(event)

        created_services.append({'ServiceName': service_name, 'EventName': event_name, 'AssumedRoleArn': assumed_role_arn})

    # Generate the report
    report = 'Service Creation Report:\n\n'
    for created_service in created_services:
        service_name = created_service['ServiceName']
        event_name = created_service['EventName']
        assumed_role_arn = created_service['AssumedRoleArn']

        report += f'Service Name: {service_name}\n'
        report += f'Event Name: {event_name}\n'
        report += f'Assumed Role ARN: {assumed_role_arn}\n\n'

    # Send the report via email
    sender_email = 'sender@example.com'  # Replace with the sender email address
    recipient_email = 'recipient@example.com'  # Replace with the recipient email address
    subject = 'Service Creation Report'
    body = report

    try:
        response = ses_client.send_email(
            Source=sender_email,
            Destination={'ToAddresses': [recipient_email]},
            Message={
                'Subject': {'Data': subject},
                'Body': {'Text': {'Data': body}}
            }
        )
        print("Email sent successfully!")
    except ClientError as e:
        print(f"Failed to send email: {e.response['Error']['Message']}")
