import boto3
from botocore.exceptions import ClientError
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

def lambda_handler(event, context):
    # Replace these with your specific details
    region_name = 'us-east-1'
    trail_name = 'your-cloudtrail-name'
    sender_email = 'your-sender-email@example.com'
    recipient_email = 'recipient-email@example.com'
    aws_account_id = 'your-aws-account-id'

    # Initialize AWS clients
    cloudtrail = boto3.client('cloudtrail', region_name=region_name)
    ses = boto3.client('ses', region_name=region_name)

    try:
        # Get the latest CloudTrail events
        response = cloudtrail.lookup_events(
            LookupAttributes=[{'AttributeKey': 'EventName', 'AttributeValue': 'CreateFunction'}],
            MaxResults=10  # Adjust this to get the required number of events
        )

        # Format the events into a table
        table = "<table border='1'><tr><th>Event Time</th><th>Event Name</th><th>Event Source</th></tr>"
        for event in response['Events']:
            table += f"<tr><td>{event['EventTime']}</td><td>{event['EventName']}</td><td>{event['EventSource']}</td></tr>"
        table += "</table>"

        # Send the report via email
        subject = "CloudTrail Event Report"
        body = f"Hello,\n\nBelow is the latest CloudTrail event report for 'CreateFunction' events in AWS Account: {aws_account_id}\n\n{table}"
        msg = MIMEMultipart('alternative')
        msg['Subject'] = subject
        msg['From'] = sender_email
        msg['To'] = recipient_email
        part = MIMEText(body, 'html')
        msg.attach(part)

        # Replace this with your verified SES domain or email address
        response = ses.send_raw_email(
            Source=sender_email,
            Destinations=[recipient_email],
            RawMessage={'Data': msg.as_string()}
        )

        print(f"Email sent successfully! Message ID: {response['MessageId']}")

        return {
            'statusCode': 200,
            'body': 'Email sent successfully!'
        }
    except ClientError as e:
        print(f"Error: {e}")
        return {
            'statusCode': 500,
            'body': 'Error sending email!'
        }
