import boto3
import json

def get_cloudtrail_events(event, context):
    # Configure your AWS region and SES client
    region = 'your_aws_region'
    ses_client = boto3.client('ses', region_name=region)
    
    # Specify the event name you want to filter for
    event_name_filter = 'CreateFunction'

    # Initialize the CloudTrail client
    cloudtrail_client = boto3.client('cloudtrail', region_name=region)

    # Use the lookupEvents API to retrieve the events
    response = cloudtrail_client.lookup_events(
        LookupAttributes=[
            {
                'AttributeKey': 'EventName',
                'AttributeValue': event_name_filter
            }
        ]
    )
    
    # Extract required event details
    event_details = []
    for event_data in response['Events']:
        event_name = event_data['EventName']
        user_identity = event_data['Username']
        assume_role_arn = event_data['UserIdentity']['SessionContext']['SessionIssuer']['Arn']
        event_details.append({'EventName': event_name, 'UserIdentity': user_identity, 'AssumeRoleArn': assume_role_arn})

    # Create a table to format the event details
    table = "<table border='1'><tr><th>Event Name</th><th>User Name</th><th>Assume Role ARN</th></tr>"
    for event_detail in event_details:
        table += f"<tr><td>{event_detail['EventName']}</td><td>{event_detail['UserIdentity']}</td><td>{event_detail['AssumeRoleArn']}</td></tr>"
    table += "</table>"
    
    # Send email using SES
    sender_email = 'your_sender_email'
    recipient_email = 'your_recipient_email'
    subject = 'CloudTrail Event Report'
    body = f"CloudTrail events with EventName '{event_name_filter}':\n\n{table}"
    
    try:
        ses_client.send_email(
            Source=sender_email,
            Destination={'ToAddresses': [recipient_email]},
            Message={
                'Subject': {'Data': subject},
                'Body': {'Html': {'Data': body}}
            }
        )
        return {
            'statusCode': 200,
            'body': json.dumps('Email sent successfully.')
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps(f'Error sending email: {str(e)}')
        }
