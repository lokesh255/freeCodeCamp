import boto3

from botocore.exceptions import ClientError

def get_assumed_role_arn(event):
    user_identity = event.get('userIdentity')
    if user_identity:
        session_context = user_identity.get('sessionContext')
        if session_context:
            session_issuer = session_context.get('sessionIssuer')
            if session_issuer:
                return session_issuer.get('arn')
    return 'Unknown'

def lambda_handler(event, context):
    # Configure AWS services
    ses_client = boto3.client('ses')
    cloudtrail_client = boto3.client('cloudtrail')

    # Retrieve CloudTrail events for Lambda service and CreateFunction event name
    response = cloudtrail_client.lookup_events(
        LookupAttributes=[
            {'AttributeKey': 'EventName', 'AttributeValue': 'CreateFunction'},
            {'AttributeKey': 'EventSource', 'AttributeValue': 'lambda.amazonaws.com'}
        ]
    )

    # Process CloudTrail events
    log_events = response['Events']
    created_lambdas = []

    for event in log_events:
        # Extract information about the created Lambda function
        function_name = event.get('eventName')
        assumed_role_arn = get_assumed_role_arn(event)

        if function_name:
            created_lambdas.append({'FunctionName': function_name, 'AssumedRoleArn': assumed_role_arn})

    # Generate the report
    report = 'Lambda Function Creation Report:\n\n'
    for created_lambda in created_lambdas:
        function_name = created_lambda['FunctionName']
        assumed_role_arn = created_lambda['AssumedRoleArn']

        report += f'Function Name: {function_name}\n'
        report += f'Assumed Role ARN: {assumed_role_arn}\n\n'

    # Send the report via email
    sender_email = 'sender@example.com'  # Replace with the sender email address
    recipient_email = 'recipient@example.com'  # Replace with the recipient email address
    subject = 'Lambda Function Creation Report'
    body = report

    try:
        response = ses_client.send_email(
            Source=sender_email,
            Destination={'ToAddresses': [recipient_email]},
            Message={
                'Subject': {'Data': subject},
                'Body': {'Text': {'Data': body}}
            }
        )
        print("Email sent successfully!")
    except ClientError as e:
        print(f"Failed to send email: {e.response['Error']['Message']}")
