import boto3

def get_event_data():
    # Retrieve the user, assumed role, and S3 bucket name from CloudTrail event history
    events = []
    client = boto3.client('cloudtrail')
    
    response = client.lookup_events(LookupAttributes=[{'AttributeKey': 'EventName', 'AttributeValue': 'CreateBucket'}])
    events += response['Events']
    
    while 'NextToken' in response:
        response = client.lookup_events(LookupAttributes=[{'AttributeKey': 'EventName', 'AttributeValue': 'CreateBucket'}],
                                        NextToken=response['NextToken'])
        events += response['Events']
    
    for event in events:
        user_identity = event['Username']
        assumed_role = event['UserIdentity']['SessionContext']['SessionIssuer']['Arn']
        s3_name = event['RequestParameters']['bucketName']
        
        yield user_identity, assumed_role, s3_name

def send_email(sender, recipient, subject, body):
    # Send an email using Amazon SES
    ses_client = boto3.client('ses')
    ses_client.send_email(
        Source=sender,
        Destination={
            'ToAddresses': [recipient]
        },
        Message={
            'Subject': {
                'Data': subject
            },
            'Body': {
                'Text': {
                    'Data': body
                }
            }
        }
    )

def lambda_handler(event, context):
    report = "S3 Bucket Creation Report:\n\n"
    
    for user, assumed_role, s3_name in get_event_data():
        report += f"User: {user}\nAssumed Role: {assumed_role}\nS3 Bucket Name: {s3_name}\n\n"

    if len(report) > len("S3 Bucket Creation Report:\n\n"):
        # Replace the below placeholders with your own email details
        sender = "your_email@example.com"
        recipient = "recipient_email@example.com"
        subject = "S3 Bucket Creation Report"
        
        send_email(sender, recipient, subject, report)
