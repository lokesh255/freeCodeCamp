import boto3
import json
import datetime

def get_assume_role_details(user_arn):
    iam_client = boto3.client("iam")
    response = iam_client.list_role_tags(RoleName=user_arn)
    tags = response["Tags"]
    role_name = user_arn.split("/")[-1]
    
    return {
        "RoleName": role_name,
        "Tags": tags
    }

def lambda_handler(event, context):
    # Initialize AWS clients
    cloudtrail_client = boto3.client("cloudtrail")
    
    # Retrieve Lambda function creation events from CloudTrail
    response = cloudtrail_client.lookup_events(
        LookupAttributes=[
            {
                "AttributeKey": "EventName",
                "AttributeValue": "CreateFunction"
            }
        ],
        StartTime=datetime.datetime.now() - datetime.timedelta(days=7)  # Adjust the time range as per your requirements
    )
    
    # Process CloudTrail events and generate report
    report = []
    
    for event in response["Events"]:
        # Extract relevant details from the CloudTrail event
        user_arn = event["Username"]
        
        # Get AssumeRole details for the user who created the Lambda function
        assume_role_details = get_assume_role_details(user_arn)
        
        # Append details to the report
        report.append({
            "LambdaFunctionName": event["Resources"][0]["ResourceName"],
            "RoleName": assume_role_details["RoleName"],
            "Tags": assume_role_details["Tags"]
        })
    
    # Print the report
    print(json.dumps(report, indent=4))
    
    return {
        "statusCode": 200,
        "body": json.dumps(report)
    }
