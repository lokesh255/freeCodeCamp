import boto3

def lambda_handler(event, context):
    # Create a CloudTrail client
    cloudtrail_client = boto3.client('cloudtrail')

    # Specify the name of the CloudTrail trail
    trail_name = '<YOUR_CLOUDTRAIL_TRAIL_NAME>'

    # Retrieve the CloudTrail event history for the specified trail
    response = cloudtrail_client.lookup_events(
        LookupAttributes=[
            {'AttributeKey': 'EventName', 'AttributeValue': 'CreateCluster'},
            {'AttributeKey': 'EventSource', 'AttributeValue': 'ecs.amazonaws.com'}
        ],
        StartTime=event['time'],
        EndTime=event['time']
    )

    # Initialize a dictionary to store cluster-to-role mappings
    cluster_roles = {}

    # Process CloudTrail events
    for event in response['Events']:
        cluster_name = event['Resources'][0]['ResourceName']
        role_arn = event['UserIdentity']['Arn']

        # Add cluster-to-role mapping to the dictionary
        cluster_roles[cluster_name] = role_arn

    # Create an IAM client
    iam_client = boto3.client('iam')

    # Initialize a dictionary to store role-to-tag mappings
    role_tags = {}

    # Process roles associated with cluster creation events
    for role_arn in cluster_roles.values():
        # Get the tags associated with the IAM role
        response = iam_client.list_role_tags(RoleName=role_arn.split('/')[-1])

        # Check if a specific tag exists on the role
        tag_exists = False
        if 'Tags' in response:
            for tag in response['Tags']:
                if tag['Key'] == '<YOUR_TAG_KEY>' and tag['Value'] == '<YOUR_TAG_VALUE>':
                    tag_exists = True
                    break

        # Add role-to-tag mapping to the dictionary
        role_tags[role_arn] = tag_exists

    # Generate the report
    report = "ECS Cluster Creation Report:\n\n"
    for cluster_name, role_arn in cluster_roles.items():
        report += f"Cluster: {cluster_name}\n"
        report += f"Created by Role: {role_arn}\n"
        report += f"Role has Required Tag: {role_tags[role_arn]}\n\n"

    # Send an email notification using Amazon SES
    send_email(report)

def send_email(message):
    # Create an SES client
    ses_client = boto3.client('ses')

    # Specify the sender and recipient email addresses
    sender_email = '<SENDER_EMAIL_ADDRESS>'
    recipient_email = '<RECIPIENT_EMAIL_ADDRESS>'

    # Specify the email subject and body
    subject = 'CloudTrail Log Analysis Report'
    body = f"CloudTrail analysis report:\n\n{message}"

    # Send the email
    response = ses_client.send_email(
        Source=sender_email,
        Destination={'ToAddresses': [recipient_email]},
        Message={
            'Subject': {'Data': subject},
            'Body': {'Text': {'Data': body}}
        }
    )
